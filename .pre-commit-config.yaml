# Pre-commit hooks configuration for AIM Framework
# See https://pre-commit.com for more information
# See https://pre-commit.com/hooks.html for more hooks

repos:
  # General hooks for file formatting and validation
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: trailing-whitespace
        description: Trim trailing whitespace
      - id: end-of-file-fixer
        description: Ensure files end with a newline
      - id: check-yaml
        description: Check YAML files for syntax errors
      - id: check-json
        description: Check JSON files for syntax errors
      - id: check-toml
        description: Check TOML files for syntax errors
      - id: check-xml
        description: Check XML files for syntax errors
      - id: check-merge-conflict
        description: Check for merge conflict markers
      - id: check-case-conflict
        description: Check for case conflicts in filenames
      - id: check-added-large-files
        description: Prevent giant files from being committed
        args: ['--maxkb=1000']
      - id: check-docstring-first
        description: Check that docstrings come first
      - id: debug-statements
        description: Check for debugger imports and py37+ breakpoint() calls
      - id: name-tests-test
        description: Ensure test files are named correctly
        args: ['--pytest-test-first']
      - id: requirements-txt-fixer
        description: Sort requirements.txt files
      - id: fix-byte-order-marker
        description: Remove UTF-8 byte order marker

  # Python code formatting with Black
  - repo: https://github.com/psf/black
    rev: 23.12.1
    hooks:
      - id: black
        description: Format Python code with Black
        language_version: python3
        args: ['--line-length=88', '--target-version=py38']

  # Import sorting with isort
  - repo: https://github.com/pycqa/isort
    rev: 5.13.2
    hooks:
      - id: isort
        description: Sort Python imports
        args: ['--profile=black', '--line-length=88']

  # Python linting with flake8
  - repo: https://github.com/pycqa/flake8
    rev: 7.0.0
    hooks:
      - id: flake8
        description: Lint Python code with flake8
        additional_dependencies:
          - flake8-docstrings
          - flake8-bugbear
          - flake8-comprehensions
          - flake8-simplify
        args:
          - '--max-line-length=88'
          - '--extend-ignore=E203,W503,E501'
          - '--max-complexity=10'

  # Type checking with mypy
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.8.0
    hooks:
      - id: mypy
        description: Static type checking with mypy
        additional_dependencies:
          - types-requests
          - types-setuptools
        args:
          - '--ignore-missing-imports'
          - '--disallow-untyped-defs'
          - '--warn-return-any'
          - '--warn-unused-configs'

  # Security linting with bandit
  - repo: https://github.com/pycqa/bandit
    rev: 1.7.5
    hooks:
      - id: bandit
        description: Security linting with bandit
        args: ['-r', 'src/', '-f', 'custom']
        exclude: ^tests/

  # Dependency vulnerability checking with safety
  - repo: https://github.com/Lucas-C/pre-commit-hooks-safety
    rev: v1.3.2
    hooks:
      - id: python-safety-dependencies-check
        description: Check for known security vulnerabilities

  # Documentation linting
  - repo: https://github.com/pycqa/pydocstyle
    rev: 6.3.0
    hooks:
      - id: pydocstyle
        description: Check docstring style
        args:
          - '--convention=google'
          - '--add-ignore=D100,D104,D105,D107'

  # YAML formatting
  - repo: https://github.com/pre-commit/mirrors-prettier
    rev: v4.0.0-alpha.8
    hooks:
      - id: prettier
        description: Format YAML, JSON, and Markdown files
        types_or: [yaml, json, markdown]
        args: ['--prose-wrap=always', '--print-width=80']

  # Shell script linting
  - repo: https://github.com/shellcheck-py/shellcheck-py
    rev: v0.9.0.6
    hooks:
      - id: shellcheck
        description: Lint shell scripts

  # Dockerfile linting
  - repo: https://github.com/hadolint/hadolint
    rev: v2.12.0
    hooks:
      - id: hadolint-docker
        description: Lint Dockerfiles

  # Commit message formatting
  - repo: https://github.com/commitizen-tools/commitizen
    rev: v3.13.0
    hooks:
      - id: commitizen
        description: Check commit message format
        stages: [commit-msg]

  # License header checking
  - repo: https://github.com/Lucas-C/pre-commit-hooks
    rev: v1.5.4
    hooks:
      - id: insert-license
        description: Insert license header in Python files
        files: \.py$
        args:
          - --license-filepath
          - LICENSE_HEADER.txt
          - --comment-style
          - '#'

# Configuration for specific hooks
ci:
  autofix_commit_msg: |
    [pre-commit.ci] auto fixes from pre-commit.com hooks

    for more information, see https://pre-commit.ci
  autofix_prs: true
  autoupdate_branch: ''
  autoupdate_commit_msg: '[pre-commit.ci] pre-commit autoupdate'
  autoupdate_schedule: weekly
  skip: []
  submodules: false

# Exclude patterns
exclude: |
  (?x)^(
      \.git/.*|
      \.venv/.*|
      venv/.*|
      __pycache__/.*|
      \.pytest_cache/.*|
      \.mypy_cache/.*|
      build/.*|
      dist/.*|
      \.eggs/.*|
      .*\.egg-info/.*|
      docs/_build/.*
  )$
